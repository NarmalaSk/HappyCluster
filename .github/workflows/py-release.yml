name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      Version:
        description: "Enter Release Version"
        required: true
        default: "1.0.0"

jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Release Branch
        run: |
          echo "Current ref: $GITHUB_REF"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          
          if [[ "$BRANCH_NAME" == release/* ]]; then
            echo "Valid release branch: $BRANCH_NAME"
          else
            echo "This workflow can only run on release/* branches."
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Ruff Lints and Autoformat Check
        uses: astral-sh/ruff-action@v3.5.1
        with:
          args: check . --fix 

      - name: Run Unit Tests and Coverage
        run: |
          coverage run -m unittest
          coverage report -m --fail-under=80

      - name: Compile Code
        run: python -m compileall .

  Release:
    needs: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Azure CLI
        uses: pietrobolcato/install-azure-cli-action@v1.0.1

      - name: Login to Azure via CLI
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_ACR }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Latest Repository and Image Version
        id: version_check
        run: |
          ACR_NAME="${{ secrets.AZURE_ACR }}"
          INPUT_VERSION="${{ github.event.inputs.Version }}"

          # Get the latest repository by last update time
          LATEST_REPO=$(az acr repository list \
            --name $ACR_NAME \
            --orderby time_desc \
            --top 1 \
            --output tsv)

          if [[ -z "$LATEST_REPO" ]]; then
            echo "No repositories found in ACR. Using input for image base."
            IMAGE_BASE="python_service"
          else
            IMAGE_BASE="$LATEST_REPO"
          fi

          # Get the latest tag for that repository
          LATEST_TAG=$(az acr repository show-tags \
            --name $ACR_NAME \
            --repository $IMAGE_BASE \
            --orderby time_desc \
            --top 1 \
            --output tsv || echo "none")

          echo "Latest repository: $IMAGE_BASE"
          echo "Latest tag: $LATEST_TAG"
          echo "Input version: $INPUT_VERSION"

          IMAGE_NAME="${IMAGE_BASE}_${INPUT_VERSION}"

          if [[ "$LATEST_TAG" == "$INPUT_VERSION" || "$LATEST_TAG" == "$IMAGE_NAME" ]]; then
            echo "Error: Version $INPUT_VERSION already exists in $IMAGE_BASE."
            exit 1
          fi

          echo "LATEST_REPO=$IMAGE_BASE" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "Proceeding to build new image: $IMAGE_NAME"

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME .

      - name: Tag Docker Image for ACR
        run: |
          FULL_TAG="${{ secrets.AZURE_ACR }}.azurecr.io/$IMAGE_NAME"
          echo "Tagging image as: $FULL_TAG"
          docker tag $IMAGE_NAME $FULL_TAG

      - name: Push Docker Image to ACR
        run: |
          FULL_TAG="${{ secrets.AZURE_ACR }}.azurecr.io/$IMAGE_NAME"
          echo "Pushing new image: $FULL_TAG"
          docker push $FULL_TAG

