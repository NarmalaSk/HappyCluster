name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      Version:
        description: "Enter Release Version"
        required: true
        default: "1.0.0"

jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Trigger Run Audits
        run: |
          echo "Triggered by: $GITHUB_ACTOR"
          echo "Branch: $GITHUB_REF"
          echo "Input Version: ${{ github.event.inputs.Version }}"

          
      - name: Validate Release Branch 
        run: | 
             BRANCH_NAME="${GITHUB_REF#refs/heads/}" 
             if [[ "$BRANCH_NAME" != release/* ]]; then 
               exit 1 
             fi

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Ruff Lints and Autoformat Check
        uses: astral-sh/ruff-action@v3.5.1
        with:
          args: check . --fix

      - name: Run Unit Tests and Coverage
        run: |
          coverage run -m unittest
          coverage report -m --fail-under=80

      - name: Compile Code
        run: python -m compileall .

  Release:
    needs: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Azure CLI
        uses: pietrobolcato/install-azure-cli-action@v1.0.1

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Login to Azure via CLI
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_ACR }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Latest Repository and Image Version
        id: version_check
        run: |
          FIRST=$(az acr repository list -n acrtravshared -o json | jq -r '.[0]')
          if [[ $FIRST =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            VERSION="none"
          fi
          INPUT_VERSION="${{ github.event.inputs.Version }}"
          if [[ "$VERSION" == "$INPUT_VERSION" ]]; then
            exit 1
          fi
          IMAGE_NAME="python_service_${INPUT_VERSION}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "LATEST_VERSION=$VERSION" >> $GITHUB_ENV


      - name: Build Docker Image
        run: docker buildx build --load -t $IMAGE_NAME .

      - name: Tag Docker Image for ACR
        run: docker tag $IMAGE_NAME ${{ secrets.AZURE_ACR }}.azurecr.io/$IMAGE_NAME

      - name: Push Docker Image to ACR
        run: docker push ${{ secrets.AZURE_ACR }}.azurecr.io/$IMAGE_NAME
