name: Build and Publish Dev Snapshot

on:
  push:
    branches:
      - Develop
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (e.g. 1.2.0)'
        required: true
        default: '1.0.0'

env:
  DOCKER_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  IMAGE_NAME: ${{ secrets.USR_Image }}
  APP_NAME: Sampleapp

jobs:
  build-and-publish:
    name: Build and Push SNAPSHOT docker Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run Lints and Code formatting
        uses: astral-sh/ruff-action@v3.5.1
        with:
          args: check .
          src: .
      
      - name: Build and Compile Code
        run: python -m compileall .

      - name: Running unit test cases
        run: python -m unittest 

      - name: Build Python package
        run: python -m build

      - name: Generate short SHA
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
        with:
          length: 7

      - name: Log in to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set build variables
        run: |
          VERSION="${{ github.event.inputs.version || '1.0.0' }}"
          SHORT_SHA="${{ steps.short-sha.outputs.sha }}"
          IMAGE_TAG="${VERSION}-snapshot-${SHORT_SHA}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          echo "Building and pushing image: $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
          docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG \
                       -t $DOCKER_REGISTRY/$IMAGE_NAME:dev-snapshot .
          docker push $DOCKER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$IMAGE_NAME:dev-snapshot
