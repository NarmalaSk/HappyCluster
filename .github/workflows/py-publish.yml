name: py-publish

on:
  pull_request:
    branches:
      - main
      - develop
      - release

  workflow_dispatch:
    inputs:
      env:
        description: "Select environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - uat
          - prod

jobs:
  Build:
    if: ${{ github.event.inputs.env == 'dev' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Ruff Lints
        uses: astral-sh/ruff-action@v3.5.1
        with:
          args: check . --fix

      - name: Run Unit Tests and Coverage
        run: |
          coverage run -m unittest
          coverage report -m --fail-under=80

      - name: Compile Code
        run: python -m compileall .

  Publish:
    name: Publish Docker Image to ACR
    needs: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./python

    env:
      AZURE_ACR: ${{ secrets.AZURE_ACR }}             
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ENV_TAG: ${{ github.event.inputs.env }}
      IMAGE_VERSION: "v1.0.0"
      IMAGE_NAME: "python_service"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure with Service Principal
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Azure Container Registry Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_ACR }}.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build Docker Image
        run: |
          IMAGE_FULL_NAME="${IMAGE_NAME}_${ENV_TAG}_snapshot_${IMAGE_VERSION}"
          docker build -t $IMAGE_FULL_NAME .

      - name: Tag Docker Image for ACR
        run: |
          IMAGE_FULL_NAME="${IMAGE_NAME}_${ENV_TAG}_snapshot_${IMAGE_VERSION}"
          docker tag $IMAGE_FULL_NAME $AZURE_ACR.azurecr.io/$IMAGE_FULL_NAME

      - name: Push Docker Image to ACR (Override Same Tag)
        run: |
          IMAGE_FULL_NAME="${IMAGE_NAME}_${ENV_TAG}_snapshot_${IMAGE_VERSION}"
          echo "Pushing image: $AZURE_ACR.azurecr.io/$IMAGE_FULL_NAME"
          docker push $AZURE_ACR.azurecr.io/$IMAGE_FULL_NAME
